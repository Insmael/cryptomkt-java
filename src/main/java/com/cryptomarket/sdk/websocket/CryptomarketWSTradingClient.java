package com.cryptomarket.sdk.websocket;

import java.util.List;

import com.cryptomarket.params.OrderRequest;
import com.cryptomarket.params.OrderType;
import com.cryptomarket.params.Side;
import com.cryptomarket.params.TimeInForce;
import com.cryptomarket.sdk.Callback;
import com.cryptomarket.sdk.models.Balance;
import com.cryptomarket.sdk.models.Report;

import org.jetbrains.annotations.Nullable;

/**
 * TradingClient connects via websocket to cryptomarket to enable the user to manage orders. uses SHA256 as auth method and authenticates on connection.
 */
public interface CryptomarketWSTradingClient extends CryptomarketWS {

    /**
     * Subscribe to a feed of trading events of the account.
     * <p>
     * https://api.exchange.cryptomkt.com/#subscribe-to-reports
     * 
     * @param callback A Callback to call with the result data. 
    * @param resultCallback  Optional. A Callback to call with the result data. 
     * 
     * @return A feed of reports of trading events of the account.
     */
    public void subscribeToReports(Callback<Report> callback, @Nullable Callback<Boolean> resultCallback);

    /**
     * Creates a new order
     * <p>
     * https://api.exchange.cryptomkt.com/#place-new-order
     * 
     * @param clientOrderId Optional. If given must be unique within the trading day, including all active orders. If not given, is generated by the server.
     * @param symbol Trading symbol
     * @param side A Side enum
     * @param quantity Order quantity
     * @param orderType Optional. An OrderType enum. default is OrderType.LIMIT
     * @param price Required for OrderType.LIMIT and OrderType.STOPLIMIT. limit price of the order
     * @param stopPrice Required for OrderType.STOPLIMIT and OrderType.STOPMARKET orders. stop price of the order
     * @param timeInForce Optional. A TimeInForce enum. Default to TimeInForce.GTC
     * @param expireTime Required for orders with timeInForce.GDT
     * @param strictValidate Optional. If False, the server rounds half down for tickerSize and quantityIncrement. Example of ETHBTC: tickSize = '0.000001', then price '0.046016' is valid, '0.0460165' is invalid. 
     * @param postOnly Optional. If True, your post_only order causes a match with a pre-existing order as a taker, then the order will be cancelled.
     * @param callback Optional. A Callback to call with the result data. 
     * 
     * @return The newly created order.
     */
    public void createOrder(
        String clientOrderId,
        String symbol,
        Side side,
        String quantity,
        @Nullable OrderType orderType,
        @Nullable String price,
        @Nullable String stopPrice,
        @Nullable TimeInForce timeInForce,
        @Nullable String expireTime,
        @Nullable Boolean strictValidate,
        @Nullable Boolean postOnly,
        @Nullable Callback<Report> callback);

    /**
     * Creates a new order
     * <p>
     * https://api.exchange.cryptomkt.com/#place-new-order
     * 
     * @param orderRequest an OrderRequest instance, buildable with new OrderRequest.Builder().someArg(arg).build()orderRequest
     * @param callback Optional. A Callback to call with the result data. 
     * 
     * @return A created order
     */
    public void createOrder(OrderRequest orderRequest, Callback<Report> callback);

    /**
     * Cancel the order with ClientOrderId.
     * <p>
     * https://api.exchange.cryptomkt.com/#cancel-order
     * 
     * @param clientOrderId The client id of the order to cancel.
     * @param callback Optional. A Callback to call with the result data. 
     * 
     * @return The canceled order.
     */
    public void cancelOrder(String clientOrderId, Callback<Report> callback);


    /**
     * Rewrites an order, canceling it or replacing it.
     * <p>
     * The Cancel/Replace request is used to change the parameters of an existing order and to change the quantity or price attribute of an open order.
     * <p>
     * Do not use this request to cancel the quantity remaining in an outstanding order. Use the cancel_order for this purpose.
     * <p>
     * It is stipulated that a newly entered order cancels a prior order that has been entered, but not yet executed.
     * <p>
     * https://api.exchange.cryptomkt.com/#cancel-replace-order
     * 
     * @param clientOrderId The client id of the order to modify.
     * @param requestClientId The new id for the modified order.
     * @param quantity Optional. The new quantity of the order. 
     * @param price Optional. The new price of the order.
     * @param strict_validate Optional. If False, the server rounds half down for tickerSize and quantityIncrement. Example of ETHBTC: tickSize = '0.000001', then price '0.046016' is valid, '0.0460165' is invalid. 
     * @param callback Optional. A Callback to call with the result data. 
     * 
     * @return The modified order.
     */
    public void replaceOrder(
        String clientOrderId, 
        String requestClientId, 
        @Nullable String quantity,
        @Nullable String price,
        @Nullable Boolean strictValidate,
        Callback<Report> callback);
    
    /**
     * Get the account active orders.
     * <p>
     * https://api.exchange.cryptomkt.com/#get-active-orders-2
     * 
     * @param callback A Callback to call with the result data. 
     * 
     * @return The account active orders.
     */
    public void getActiveOrders(Callback<List<Report>> callback);

    /**
     * Get the user trading balance.
     * <p>
     * https://api.exchange.cryptomkt.com/#get-trading-balance
     * 
     * @param callback A Callback to call with the result data. 
     * 
     * @return The user trading balance.
     */
    public void getTradingBalance(Callback<List<Balance>> callback);
}
